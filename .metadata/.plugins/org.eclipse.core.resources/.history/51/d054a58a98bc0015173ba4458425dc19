import java.util.Scanner;
import java.util.Stack;


public class InfixtoPostfix {

	public static void main(String[] args) {
	
		Scanner sc=new Scanner(System.in);
		
		String inp=sc.nextLine();
		
		Stack stk = new Stack();
		
		char[] c=inp.toCharArray();
		
		for(int i=0;i<c.length;i++){
			if(c[i]>='a'&&c[i]<='z' ||c[i]>='A'&&c[i]<='Z'){
			  System.out.print(c[i]);
			 }else{
				 if(stk.isEmpty()){
					 stk.push(c[i]);
				 }else{ switch(c[i]){
				        case 1: c[i]='+';
				                if(stk.peek().equals('+')||stk.peek().equals('-')||stk.peek().equals('('))
				                {stk.push(c[i]);
				                }else
				                {
				                  while(stk.peek().equals('*')||stk.peek().equals('/')||stk.isEmpty()){
				                	  System.out.print(stk.pop());  
				                  }
				                }
				                break;
				        case 2: c[i]='-'; 
				        if(stk.peek().equals('+')||stk.peek().equals('-')||stk.peek().equals('('))
		                {stk.push(c[i]);
		                }else
		                {
		                  while(stk.peek().equals('*')||stk.peek().equals('/')||stk.isEmpty()){
		                	  System.out.print(stk.pop());  
		                  }
		                
		                }
				        break;
				        case 3: c[i]='*';
				        if(stk.peek().equals('+')||stk.peek().equals('-')||stk.peek().equals('*')||stk.peek().equals('/'))
		                {stk.push(c[i]);
		                }
				        break;
				        case 4: c[i]='/';
				        if(stk.peek().equals('+')||stk.peek().equals('-')||stk.peek().equals('*')||stk.peek().equals('/'))
		                {stk.push(c[i]);
		                }
				        break;
				        case 5: c[i]='(';
				        stk.push(c[i]);
				        break;
				        
				        case 6: c[i]=')';
				        while(!stk.peek().equals('(')){
				        	System.out.print(stk.pop());
				        }
				        System.out.print(')');
				        
				        
				        
				 }
					 
					 
					 
					 
				 }
			 }
			
		}

	}

}
